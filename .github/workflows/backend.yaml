name: Build backend

on:
  push:
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yaml'
      - 'docker-compose.yaml'
    branches: [ "main", "backend" ]
  pull_request:
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yaml'
    branches: [ "main", "backend" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: vladdan16/spda-afisha-backend

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'oracle'
          cache: gradle

      - name: Run checkstyle
        run: gradle -p backend checkstyleMain

      - name: Upload checkstyle report
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-bot-report
          path: backend/build/reports/checkstyle/main.html

      - name: Build with Gradle                                     
        run: gradle -p backend build

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5

      - name: Log in to Registry ${{ env.REGISTRY }}
        if: (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/backend') || (github.event == 'push' && github.ref == 'refs/heads/main')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: ./backend/Dockerfile
          push: ${{ (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/backend') || (github.event == 'push' && github.ref == 'refs/heads/main') }}
          tags: ghcr.io/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max
